
// SPDX-License-Identifier: MIT\r\n\r\n// File: MemeToken.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ninterface IERC20 {\r\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\r\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\r\n\r\n\tfunction totalSupply() external view returns (uint256);\r\n\tfunction balanceOf(address account) external view returns (uint256);\r\n\tfunction transfer(address to, uint256 amount) external returns (bool);\r\n\tfunction allowance(address owner, address spender) external view returns (uint256);\r\n\tfunction approve(address spender, uint256 amount) external returns (bool);\r\n\tfunction transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IERC20Metadata is IERC20 {\r\n\tfunction name() external view returns (string memory);\r\n\tfunction symbol() external view returns (string memory);\r\n\tfunction decimals() external view returns (uint8);\r\n}\r\n\r\nabstract contract Context {\r\n\tfunction _msgSender() internal view virtual returns (address) {\r\n\t\treturn msg.sender;\r\n\t}\r\n\r\n\tfunction _msgData() internal view virtual returns (bytes calldata) {\r\n\t\treturn msg.data;\r\n\t}\r\n}\r\n\r\ncontract ERC20 is Context, IERC20, IERC20Metadata {\r\n\tmapping(address =\u003e uint256) private _balances;\r\n\tmapping(address =\u003e mapping(address =\u003e uint256)) private _allowances;\r\n\tuint256 private _totalSupply;\r\n\tstring private _name;\r\n\tstring private _symbol;\r\n\r\n\tconstructor(string memory name_, string memory symbol_) {\r\n\t\t_name = name_;\r\n\t\t_symbol = symbol_;\r\n\t}\r\n\r\n\tfunction name() public view virtual override returns (string memory) {\r\n\t\treturn _name;\r\n\t}\r\n\r\n\tfunction symbol() public view virtual override returns (string memory) {\r\n\t\treturn _symbol;\r\n\t}\r\n\r\n\tfunction decimals() public view virtual override returns (uint8) {\r\n\t\treturn 18;\r\n\t}\r\n\r\n\tfunction totalSupply() public view virtual override returns (uint256) {\r\n\t\treturn _totalSupply;\r\n\t}\r\n\r\n\tfunction balanceOf(address account) public view virtual override returns (uint256) {\r\n\t\treturn _balances[account];\r\n\t}\r\n\r\n\tfunction transfer(address to, uint256 amount) public virtual override returns (bool) {\r\n\t\taddress owner = _msgSender();\r\n\t\t_transfer(owner, to, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction allowance(\r\n\t\taddress owner,\r\n\t\taddress spender\r\n\t) public view virtual override returns (uint256) {\r\n\t\treturn _allowances[owner][spender];\r\n\t}\r\n\r\n\tfunction approve(address spender, uint256 amount) public virtual override returns (bool) {\r\n\t\taddress owner = _msgSender();\r\n\t\t_approve(owner, spender, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction transferFrom(\r\n\t\taddress from,\r\n\t\taddress to,\r\n\t\tuint256 amount\r\n\t) public virtual override returns (bool) {\r\n\t\taddress spender = _msgSender();\r\n\t\t_spendAllowance(from, spender, amount);\r\n\t\t_transfer(from, to, amount);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\r\n\t\taddress owner = _msgSender();\r\n\t\t_approve(owner, spender, allowance(owner, spender) + addedValue);\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction decreaseAllowance(\r\n\t\taddress spender,\r\n\t\tuint256 subtractedValue\r\n\t) public virtual returns (bool) {\r\n\t\taddress owner = _msgSender();\r\n\t\tuint256 currentAllowance = allowance(owner, spender);\r\n\t\trequire(currentAllowance \u003e= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n\t\tunchecked {\r\n\t\t\t_approve(owner, spender, currentAllowance - subtractedValue);\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\tfunction _transfer(address from, address to, uint256 amount) internal virtual {\r\n\t\trequire(from != address(0), \"ERC20: transfer from the zero address\");\r\n\t\trequire(to != address(0), \"ERC20: transfer to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(from, to, amount);\r\n\r\n\t\tuint256 fromBalance = _balances[from];\r\n\t\trequire(fromBalance \u003e= amount, \"ERC20: transfer amount exceeds balance\");\r\n\t\tunchecked {\r\n\t\t\t_balances[from] = fromBalance - amount;\r\n\t\t\t_balances[to] += amount;\r\n\t\t}\r\n\r\n\t\temit Transfer(from, to, amount);\r\n\r\n\t\t_afterTokenTransfer(from, to, amount);\r\n\t}\r\n\r\n\tfunction _mint(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: mint to the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(address(0), account, amount);\r\n\r\n\t\t_totalSupply += amount;\r\n\t\tunchecked {\r\n\t\t\t_balances[account] += amount;\r\n\t\t}\r\n\t\temit Transfer(address(0), account, amount);\r\n\r\n\t\t_afterTokenTransfer(address(0), account, amount);\r\n\t}\r\n\r\n\tfunction _burn(address account, uint256 amount) internal virtual {\r\n\t\trequire(account != address(0), \"ERC20: burn from the zero address\");\r\n\r\n\t\t_beforeTokenTransfer(account, address(0), amount);\r\n\r\n\t\tuint256 accountBalance = _balances[account];\r\n\t\trequire(accountBalance \u003e= amount, \"ERC20: burn amount exceeds balance\");\r\n\t\tunchecked {\r\n\t\t\t_balances[account] = accountBalance - amount;\r\n\t\t\t_totalSupply -= amount;\r\n\t\t}\r\n\r\n\t\temit Transfer(account, address(0), amount);\r\n\r\n\t\t_afterTokenTransfer(account, address(0), amount);\r\n\t}\r\n\r\n\tfunction _approve(address owner, address spender, uint256 amount) internal virtual {\r\n\t\trequire(owner != address(0), \"ERC20: approve from the zero address\");\r\n\t\trequire(spender != address(0), \"ERC20: approve to the zero address\");\r\n\r\n\t\t_allowances[owner][spender] = amount;\r\n\t\temit Approval(owner, spender, amount);\r\n\t}\r\n\r\n\tfunction _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n\t\tuint256 currentAllowance = allowance(owner, spender);\r\n\t\tif (currentAllowance != type(uint256).max) {\r\n\t\t\trequire(currentAllowance \u003e= amount, \"ERC20: insufficient allowance\");\r\n\t\t\tunchecked {\r\n\t\t\t\t_approve(owner, spender, currentAllowance - amount);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n\r\n\tfunction _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\r\n}\r\n\r\ninterface IUniswapV2Factory {\r\n\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint);\r\n\r\n\tfunction feeTo() external view returns (address);\r\n\tfunction feeToSetter() external view returns (address);\r\n\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\r\n\tfunction allPairs(uint) external view returns (address pair);\r\n\tfunction allPairsLength() external view returns (uint);\r\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\r\n\tfunction setFeeTo(address) external;\r\n\tfunction setFeeToSetter(address) external;\r\n}\r\n\r\ninterface IUniswapV2Router01 {\r\n\tfunction factory() external pure returns (address);\r\n\tfunction WETH() external pure returns (address);\r\n\r\n\tfunction addLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint amountADesired,\r\n\t\tuint amountBDesired,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountA, uint amountB, uint liquidity);\r\n\r\n\tfunction addLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint amountTokenDesired,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external payable returns (uint amountToken, uint amountETH, uint liquidity);\r\n\r\n\tfunction removeLiquidity(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint liquidity,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountA, uint amountB);\r\n\r\n\tfunction removeLiquidityETH(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountToken, uint amountETH);\r\n\r\n\tfunction removeLiquidityWithPermit(\r\n\t\taddress tokenA,\r\n\t\taddress tokenB,\r\n\t\tuint liquidity,\r\n\t\tuint amountAMin,\r\n\t\tuint amountBMin,\r\n\t\taddress to,\r\n\t\tuint deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint amountA, uint amountB);\r\n\r\n\tfunction removeLiquidityETHWithPermit(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint amountETH);\r\n\r\n\tfunction swapExactTokensForTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n\r\n\tfunction swapTokensForExactTokens(\r\n\t\tuint amountOut,\r\n\t\tuint amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n\r\n\tfunction swapExactETHForTokens(\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external payable returns (uint[] memory amounts);\r\n\r\n\tfunction swapTokensForExactETH(\r\n\t\tuint amountOut,\r\n\t\tuint amountInMax,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n\r\n\tfunction swapExactTokensForETH(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint[] memory amounts);\r\n\r\n\tfunction swapETHForExactTokens(\r\n\t\tuint amountOut,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external payable returns (uint[] memory amounts);\r\n\r\n\tfunction quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\r\n\r\n\tfunction getAmountOut(\r\n\t\tuint amountIn,\r\n\t\tuint reserveIn,\r\n\t\tuint reserveOut\r\n\t) external pure returns (uint amountOut);\r\n\r\n\tfunction getAmountIn(\r\n\t\tuint amountOut,\r\n\t\tuint reserveIn,\r\n\t\tuint reserveOut\r\n\t) external pure returns (uint amountIn);\r\n\r\n\tfunction getAmountsOut(\r\n\t\tuint amountIn, \r\n\t\taddress[] calldata path\r\n\t) external view returns (uint[] memory amounts);\r\n\r\n\tfunction getAmountsIn(\r\n\t\tuint amountOut,\r\n\t\taddress[] calldata path\r\n\t) external view returns (uint[] memory amounts);\r\n}\r\n\r\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\r\n\tfunction removeLiquidityETHSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external returns (uint amountETH);\r\n\r\n\tfunction removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\r\n\t\taddress token,\r\n\t\tuint liquidity,\r\n\t\tuint amountTokenMin,\r\n\t\tuint amountETHMin,\r\n\t\taddress to,\r\n\t\tuint deadline,\r\n\t\tbool approveMax,\r\n\t\tuint8 v,\r\n\t\tbytes32 r,\r\n\t\tbytes32 s\r\n\t) external returns (uint amountETH);\r\n\r\n\tfunction swapExactTokensForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n\r\n\tfunction swapExactETHForTokensSupportingFeeOnTransferTokens(\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external payable;\r\n\r\n\tfunction swapExactTokensForETHSupportingFeeOnTransferTokens(\r\n\t\tuint amountIn,\r\n\t\tuint amountOutMin,\r\n\t\taddress[] calldata path,\r\n\t\taddress to,\r\n\t\tuint deadline\r\n\t) external;\r\n}\r\n\r\nabstract contract Ownable is Context {\r\n\taddress private _owner;\r\n\r\n\tevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n\tconstructor() {\r\n\t\t_transferOwnership(_msgSender());\r\n\t}\r\n\r\n\tmodifier onlyOwner() {\r\n\t\t_checkOwner();\r\n\t\t_;\r\n\t}\r\n\r\n\tfunction owner() public view virtual returns (address) {\r\n\t\treturn _owner;\r\n\t}\r\n\r\n\tfunction _checkOwner() internal view virtual {\r\n\t\trequire(owner() == _msgSender(), \"Ownable: caller is not the owner\");\r\n\t}\r\n\r\n\tfunction renounceOwnership() public virtual onlyOwner {\r\n\t\t_transferOwnership(address(0));\r\n\t}\r\n\r\n\tfunction transferOwnership(address newOwner) public virtual onlyOwner {\r\n\t\trequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\r\n\t\t_transferOwnership(newOwner);\r\n\t}\r\n\r\n\tfunction _transferOwnership(address newOwner) internal virtual {\r\n\t\taddress oldOwner = _owner;\r\n\t\t_owner = newOwner;\r\n\t\temit OwnershipTransferred(oldOwner, newOwner);\r\n\t}\r\n}\r\n\r\ncontract TestMemeTaxedToken is ERC20, Ownable {\r\n    uint256 public buyTax;\r\n    uint256 public sellTax;\r\n    uint256 public transferTax;\r\n\r\n    address public taxRecipient;\r\n    address public deployerFee1;\r\n    address public deployerFee2;\r\n\r\n    uint256 private constant FIXED_DEPLOYER_FEE = 25; \r\n\r\n    enum TransactionType { BUY, SELL, TRANSFER }\r\n\r\n    constructor(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 initialSupply,\r\n        uint256 _buyTax,\r\n        uint256 _sellTax,\r\n        uint256 _transferTax,\r\n        address _taxRecipient,\r\n        address _deployerFee1,\r\n        address _deployerFee2\r\n    ) ERC20(name, symbol) {\r\n        require(_buyTax \u003c= 100 \u0026\u0026 _sellTax \u003c= 100 \u0026\u0026 _transferTax \u003c= 100, \"Tax must be less than or equal to 100\");\r\n\r\n        buyTax = _buyTax;\r\n        sellTax = _sellTax;\r\n        transferTax = _transferTax;\r\n        taxRecipient = _taxRecipient;\r\n        deployerFee1 = _deployerFee1;\r\n        deployerFee2 = _deployerFee2;\r\n\r\n        _mint(_taxRecipient, initialSupply * 10 ** 18);\r\n\r\n        transferOwnership(msg.sender);\r\n    }\r\n\r\n    function setTaxRates(uint256 _buyTax, uint256 _sellTax, uint256 _transferTax) external onlyOwner {\r\n        require(_buyTax \u003c= 100 \u0026\u0026 _sellTax \u003c= 100 \u0026\u0026 _transferTax \u003c= 100, \"Tax must be less than or equal to 100\");\r\n        buyTax = _buyTax;\r\n        sellTax = _sellTax;\r\n        transferTax = _transferTax;\r\n    }\r\n\r\n    function _transfer(\r\n        address sender,\r\n        address recipient,\r\n        uint256 amount\r\n    ) internal virtual override {\r\n        uint256 taxAmount;\r\n        if (sender == owner()) {\r\n            taxAmount = (amount * buyTax) / 100;\r\n        } else if (recipient == owner()) {\r\n            taxAmount = (amount * sellTax) / 100;\r\n        } else {\r\n            taxAmount = (amount * transferTax) / 100;\r\n        }\r\n        uint256 deployerFeeAmount = (amount * FIXED_DEPLOYER_FEE) / 10000;\r\n        uint256 transferAmount = amount - taxAmount - (2 * deployerFeeAmount);\r\n\r\n        super._transfer(sender, taxRecipient, taxAmount);\r\n        super._transfer(sender, deployerFee1, deployerFeeAmount);\r\n        super._transfer(sender, deployerFee2, deployerFeeAmount);\r\n        super._transfer(sender, recipient, transferAmount);\r\n    }\r\n}\r\n\r\n// File: deployerlaunchpad.sol\r\n\r\npragma solidity ^0.8.0;\r\n\r\ncontract MadContractsLaunchpad {\r\n    address public deployerFee1;\r\n    address public deployerFee2;\r\n    uint256 public tokenCount;\r\n\r\n    struct TokenDetails {\r\n        uint256 id;\r\n        string name;\r\n        string symbol;\r\n        uint256 initialSupply;\r\n        uint256 buyTax;\r\n        uint256 sellTax;\r\n        uint256 transferTax;\r\n        address owner;\r\n    }\r\n\r\n    mapping(address =\u003e TokenDetails) public deployedTokens;\r\n    mapping(uint256 =\u003e address) public tokenById;\r\n\r\n    event TokenDeployed(\r\n        address indexed tokenAddress,\r\n        uint256 indexed id,\r\n        address indexed owner,\r\n        string name,\r\n        string symbol,\r\n        uint256 supply,\r\n        uint256 buyTax,\r\n        uint256 sellTax,\r\n        uint256 transferTax\r\n    );\r\n\r\n    event DeployerFeesChanged(address indexed oldDeployerFee1, address indexed oldDeployerFee2, address indexed newDeployerFee1, address newDeployerFee2);\r\n\r\n    constructor(address _deployerFee1, address _deployerFee2) {\r\n        deployerFee1 = _deployerFee1;\r\n        deployerFee2 = _deployerFee2;\r\n        tokenCount = 0;\r\n    }\r\n\r\n    function deployMemeToken(\r\n        string memory name,\r\n        string memory symbol,\r\n        uint256 initialSupply,\r\n        uint256 buyTax,\r\n        uint256 sellTax,\r\n        uint256 transferTax,\r\n        address taxRecipient\r\n    ) external returns (address) {\r\n        TestMemeTaxedToken token = new TestMemeTaxedToken(name, symbol, initialSupply, buyTax, sellTax, transferTax, taxRecipient, deployerFee1, deployerFee2);\r\n        \r\n        token.transferOwnership(msg.sender);\r\n        tokenCount++;\r\n        deployedTokens[address(token)] = TokenDetails({\r\n            id: tokenCount,\r\n            name: name,\r\n            symbol: symbol,\r\n            initialSupply: initialSupply,\r\n            buyTax: buyTax,\r\n            sellTax: sellTax,\r\n            transferTax: transferTax,\r\n            owner: msg.sender\r\n        });\r\n        tokenById[tokenCount] = address(token);\r\n\r\n        emit TokenDeployed(address(token), tokenCount, msg.sender, name, symbol, initialSupply, buyTax, sellTax, transferTax);\r\n        return address(token);\r\n    }\r\n\r\n    function setDeployerFees(address newDeployerFee1, address newDeployerFee2) external {\r\n        require(newDeployerFee1 != address(0) \u0026\u0026 newDeployerFee2 != address(0), \"Deployer fee addresses cannot be the zero address\");\r\n        address oldDeployerFee1 = deployerFee1;\r\n        address oldDeployerFee2 = deployerFee2;\r\n        deployerFee1 = newDeployerFee1;\r\n        deployerFee2 = newDeployerFee2;\r\n        emit DeployerFeesChanged(oldDeployerFee1, oldDeployerFee2, newDeployerFee1, newDeployerFee2);\r\n    }\r\n\r\n    function getTokenDetailsById(uint256 id) external view returns (TokenDetails memory) {\r\n        address tokenAddress = tokenById[id];\r\n        require(tokenAddress != address(0), \"Token does not exist.\");\r\n        return deployedTokens[tokenAddress];\r\n    }\r\n\r\n    function getTokenDetailsByAddress(address tokenAddress) external view returns (TokenDetails memory) {\r\n        require(deployedTokens[tokenAddress].owner != address(0), \"Token does not exist.\");\r\n        return deployedTokens[tokenAddress];\r\n    }\r\n\r\n    function getTotalTokenCount() external view returns (uint256) {\r\n        return tokenCount;\r\n    }\r\n}"
